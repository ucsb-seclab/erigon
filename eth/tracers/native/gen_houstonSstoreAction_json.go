// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package native

import (
	"encoding/json"
	"math/big"

	"github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon-lib/common/hexutil"
	"github.com/ledgerwatch/erigon-lib/common/hexutility"
)

var _ = (*SstoreActionMarshalling)(nil)

// MarshalJSON marshals as JSON.
func (s SstoreAction) MarshalJSON() ([]byte, error) {
	type SstoreAction struct {
		EventId        uint64           `json:"event_id"`
		Key            *hexutil.Big     `json:"key"`
		Value          *hexutil.Big     `json:"value"`
		OldValue       *hexutil.Big     `json:"old_value"`
		Pc             hexutil.Uint64   `json:"pc"`
		Address        common.Address   `json:"address"`
		StorageAddress common.Address   `json:"storage_address"`
		Depth          int              `json:"depth"`
		CallId         uint64           `json:"call_id"`
		FID            hexutility.Bytes `json:"fid"`
	}
	var enc SstoreAction
	enc.EventId = s.EventId
	enc.Key = (*hexutil.Big)(s.Key)
	enc.Value = (*hexutil.Big)(s.Value)
	enc.OldValue = (*hexutil.Big)(s.OldValue)
	enc.Pc = hexutil.Uint64(s.Pc)
	enc.Address = s.Address
	enc.StorageAddress = s.StorageAddress
	enc.Depth = s.Depth
	enc.CallId = s.CallId
	enc.FID = s.FID
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SstoreAction) UnmarshalJSON(input []byte) error {
	type SstoreAction struct {
		EventId        *uint64           `json:"event_id"`
		Key            *hexutil.Big      `json:"key"`
		Value          *hexutil.Big      `json:"value"`
		OldValue       *hexutil.Big      `json:"old_value"`
		Pc             *hexutil.Uint64   `json:"pc"`
		Address        *common.Address   `json:"address"`
		StorageAddress *common.Address   `json:"storage_address"`
		Depth          *int              `json:"depth"`
		CallId         *uint64           `json:"call_id"`
		FID            *hexutility.Bytes `json:"fid"`
	}
	var dec SstoreAction
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.EventId != nil {
		s.EventId = *dec.EventId
	}
	if dec.Key != nil {
		s.Key = (*big.Int)(dec.Key)
	}
	if dec.Value != nil {
		s.Value = (*big.Int)(dec.Value)
	}
	if dec.OldValue != nil {
		s.OldValue = (*big.Int)(dec.OldValue)
	}
	if dec.Pc != nil {
		s.Pc = uint64(*dec.Pc)
	}
	if dec.Address != nil {
		s.Address = *dec.Address
	}
	if dec.StorageAddress != nil {
		s.StorageAddress = *dec.StorageAddress
	}
	if dec.Depth != nil {
		s.Depth = *dec.Depth
	}
	if dec.CallId != nil {
		s.CallId = *dec.CallId
	}
	if dec.FID != nil {
		s.FID = *dec.FID
	}
	return nil
}
