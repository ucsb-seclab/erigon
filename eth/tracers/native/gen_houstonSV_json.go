// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package native

import (
	"encoding/json"
	"math/big"

	"github.com/ledgerwatch/erigon-lib/common/hexutil"
)

var _ = (*SVmarshalling)(nil)

// MarshalJSON marshals as JSON.
func (s SV) MarshalJSON() ([]byte, error) {
	type SV struct {
		Slot  *hexutil.Big `json:"slot"`
		Value *hexutil.Big `json:"value"`
	}
	var enc SV
	enc.Slot = (*hexutil.Big)(s.Slot)
	enc.Value = (*hexutil.Big)(s.Value)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SV) UnmarshalJSON(input []byte) error {
	type SV struct {
		Slot  *hexutil.Big `json:"slot"`
		Value *hexutil.Big `json:"value"`
	}
	var dec SV
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Slot != nil {
		s.Slot = (*big.Int)(dec.Slot)
	}
	if dec.Value != nil {
		s.Value = (*big.Int)(dec.Value)
	}
	return nil
}
