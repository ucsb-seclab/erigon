// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package native

import (
	"encoding/json"
	"math/big"

	"github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon-lib/common/hexutil"
	"github.com/ledgerwatch/erigon-lib/common/hexutility"
	"github.com/ledgerwatch/erigon/core/vm"
)

var _ = (*houstonCallFrameMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h houstonCallFrame) MarshalJSON() ([]byte, error) {
	type houstonCallFrame0 struct {
		Id         uint64             `json:"id"`
		EventId    uint64             `json:"event_id"`
		Type       vm.OpCode          `json:"-"`
		From       common.Address     `json:"from"`
		Gas        hexutil.Uint64     `json:"gas"`
		GasUsed    hexutil.Uint64     `json:"gasUsed"`
		To         common.Address     `json:"to" rlp:"optional"`
		Input      hexutility.Bytes   `json:"input" rlp:"optional"`
		Output     hexutility.Bytes   `json:"output,omitempty" rlp:"optional"`
		Error      string             `json:"error,omitempty" rlp:"optional"`
		Revertal   string             `json:"revertReason,omitempty"`
		Calls      []houstonCallFrame `json:"calls" rlp:"optional"`
		Logs       []houstonCallLog   `json:"logs,omitempty" rlp:"optional"`
		Pc         uint64             `json:"pc,omitempty" rlp:"optional"`
		SvsEntry   []SV               `json:"svs_entry" rlp:"optional"`
		SvsExit    []SV               `json:"svs_exit" rlp:"optional"`
		Value      *hexutil.Big       `json:"value,omitempty" rlp:"optional"`
		TypeString string             `json:"type"`
	}
	var enc houstonCallFrame0
	enc.Id = h.Id
	enc.EventId = h.EventId
	enc.Type = h.Type
	enc.From = h.From
	enc.Gas = hexutil.Uint64(h.Gas)
	enc.GasUsed = hexutil.Uint64(h.GasUsed)
	enc.To = h.To
	enc.Input = h.Input
	enc.Output = h.Output
	enc.Error = h.Error
	enc.Revertal = h.Revertal
	enc.Calls = h.Calls
	enc.Logs = h.Logs
	enc.Pc = h.Pc
	enc.SvsEntry = h.SvsEntry
	enc.SvsExit = h.SvsExit
	enc.Value = (*hexutil.Big)(h.Value)
	enc.TypeString = h.TypeString()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *houstonCallFrame) UnmarshalJSON(input []byte) error {
	type houstonCallFrame0 struct {
		Id       *uint64            `json:"id"`
		EventId  *uint64            `json:"event_id"`
		Type     *vm.OpCode         `json:"-"`
		From     *common.Address    `json:"from"`
		Gas      *hexutil.Uint64    `json:"gas"`
		GasUsed  *hexutil.Uint64    `json:"gasUsed"`
		To       *common.Address    `json:"to" rlp:"optional"`
		Input    *hexutility.Bytes  `json:"input" rlp:"optional"`
		Output   *hexutility.Bytes  `json:"output,omitempty" rlp:"optional"`
		Error    *string            `json:"error,omitempty" rlp:"optional"`
		Revertal *string            `json:"revertReason,omitempty"`
		Calls    []houstonCallFrame `json:"calls" rlp:"optional"`
		Logs     []houstonCallLog   `json:"logs,omitempty" rlp:"optional"`
		Pc       *uint64            `json:"pc,omitempty" rlp:"optional"`
		SvsEntry []SV               `json:"svs_entry" rlp:"optional"`
		SvsExit  []SV               `json:"svs_exit" rlp:"optional"`
		Value    *hexutil.Big       `json:"value,omitempty" rlp:"optional"`
	}
	var dec houstonCallFrame0
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id != nil {
		h.Id = *dec.Id
	}
	if dec.EventId != nil {
		h.EventId = *dec.EventId
	}
	if dec.Type != nil {
		h.Type = *dec.Type
	}
	if dec.From != nil {
		h.From = *dec.From
	}
	if dec.Gas != nil {
		h.Gas = uint64(*dec.Gas)
	}
	if dec.GasUsed != nil {
		h.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.To != nil {
		h.To = *dec.To
	}
	if dec.Input != nil {
		h.Input = *dec.Input
	}
	if dec.Output != nil {
		h.Output = *dec.Output
	}
	if dec.Error != nil {
		h.Error = *dec.Error
	}
	if dec.Revertal != nil {
		h.Revertal = *dec.Revertal
	}
	if dec.Calls != nil {
		h.Calls = dec.Calls
	}
	if dec.Logs != nil {
		h.Logs = dec.Logs
	}
	if dec.Pc != nil {
		h.Pc = *dec.Pc
	}
	if dec.SvsEntry != nil {
		h.SvsEntry = dec.SvsEntry
	}
	if dec.SvsExit != nil {
		h.SvsExit = dec.SvsExit
	}
	if dec.Value != nil {
		h.Value = (*big.Int)(dec.Value)
	}
	return nil
}
